<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<book>
<!-- ================================================================================ -->
<!-- This DocBook file was created by AbiWord.										-->
<!-- AbiWord is a free, Open Source word processor.								   -->
<!-- You may obtain more information about AbiWord at www.abisource.com			   -->
<!-- ================================================================================ -->


	<chapter>
		<title></title>
		<section role="unnumbered">
			<title></title>
			<para><phrase role="strong"><phrase role="strong">Vexi Core Reference</phrase></para>
			<para></para>
			<para>Vexi Platform 1.0 Release</para>
			<para></para>
			<para>Charles Goodwin</para>
			<para>charlie@vexi.org</para>
			<para></para>
			<para>15th August 2004</para>
			<para></para>
			<para>Reference Version 1.0pre3</para>
			<para><beginpage/></para>
			<para></para>
			<section role="unnumbered">
				<title>Preface</title>
				<section role="unnumbered">
					<title></title>
					<section role="unnumbered">
						<title>About This Document</title>
						<para>The goal of this document is to describe the Vexi Core behaviour in detail, to facilitate development usage of the Vexi Core. This document is not a tutorial, and unsuitable for people unfamiliar with Vexi. Neither is it a specification and hence may not provide enough detail for a reimplementing Vexi, the Core or the Platform.</para>
						<para>Any queries regarding this document or about Vexi should be sent to the users@vexi.org mailing list, which can be subscribed to from http://lists.vexi.org on the Vexi website.</para>
					</section>
					<section role="unnumbered">
						<title>Vexi Platform Components</title>
						<para>	Platform	The combination of the following components</para>
						<para>	Core	The native core (or Java byte-code) that powers the UI</para>
						<para>	Launcher	A small mini-application that "shoehorns" the Core onto the<br/>	client PC and is beyond the scope of this document</para>
						<para>	UI / Application	The set of files, bundled as a zip file with a ".vexi" extension,<br/>	that are used to create and control a Vexi UI</para>
						<para>	Widgets	An official set of Vexi UI files that provide usable widgets<br/>	for use in Vexi applications</para>
					</section>
					<section role="unnumbered">
						<title>Required Knowledge</title>
						<para>	ECMAScript / Javascript	ECMAScript (aka Javascript) controls Vexi UI behaviour</para>
						<para>	XML	Vexi UIs are described using XML</para>
					</section>
					<section role="unnumbered">
						<title>Key Concepts</title>
						<para>	VexiScript	The enhanced version of ECMAScript used by Vexi</para>
						<para>	Put / Write	In VexiScript, when you change the value of something you are<br/>		putting or writing to it e.g. 'foo = 5' puts 5 to 'foo'</para>
						<para>	Get / Read	In VexiScript, when you access the value of something you are<br/>	getting or reading it e.g. 'return bar' reads (then returns) 'bar'</para>
					</section>
					<section role="unnumbered">
						<title>Application Life-Cycle</title>
						<para>&lt;describe the life-cycle of a Vexi application, with diagram&gt;</para>
					</section>
				</section>
			</section>
			<section role="unnumbered">
				<title>Vexi Fundamentals</title>
				<section role="unnumbered">
					<title>Boxes</title>
					<para>The fundamental building block for Vexi UIs is the box.</para>
					<para>A box may contain other boxes, which is referred to as the parent-child relationship. This is a one-to-many relationship; a parent box may contain many children, but a child box can only have one parent. A box may be a parent, or a child, or both, or neither. A parent-less box is considered an orphan.</para>
					<para>The parent of a box and any subsequent parents are referred to as the ascendants of the subject box. The children of a box and any subsequent children of the child boxes are referred to as descendants of the subject box.</para>
					<para>The combination of a box and it's ascendants and descendants is referred to as a box tree. The top box of a box tree is referred to as a root box or a surface box.</para>
					<para>There are three ways in which to consider a box:</para>
					<para>	Visual Representation	As a rendered object on-screen</para>
					<para>	Object Representation	As a VexiScript object</para>
					<para>	XML Representation	As an XML node (tag)</para>
					<para>Boxes are encapsulated objects. That means a child box has no direct way of accessing or ascertaining information about it's parent.</para>
					<para>New boxes are created using the &lt;ui:box /&gt; XML tag or by reading from vexi.box (the box property on the Vexi Object).</para>
				</section>
				<section role="unnumbered">
					<title>Surfaces</title>
					<para>A top-level window in a Vexi UI is referred to as a surface. There are four kinds of surfaces available to Vexi applications (see the Vexi Object for information on creating surfaces):</para>
					<para>	Frame	A fully-fledged application window decorated<br/>	with platform specific borders and buttons</para>
					<para>	Window	A fully-fledged application window but without<br/>	any decorations</para>
					<para>	Dialog	A modal dialog attached to an application<br/>	window, with platform-specific decorations</para>
					<para>	Popup	A modal dialog, attached to an application<br/>	window, but without any decorations</para>
					<para>All surfaces are scarred for security reasons. See the appendix on Security Precautions for further information on surface scarring.</para>
					<para>Whenever we refer to the size or position of a surface box, we refer to the UI accessible portion of the surface, disregarding any platform specific decoration. This has the caveat that if you set the position of a frame or dialog to (0,0) then the platform specific title-bar will be placed off-screen.</para>
					<para>Surface boxes are not directly accessible as VexiScript objects to any descendants of a surface box. However, every box has a object, accessed as 'surface', associated with it which is know as the surface object. Whenever reading this object, the Core recursively reads the surface object of the parent and returns a value when it is encountered. When a box changes surface, including addition and removal, then 'true' is put to the value of this object, and the surface object will read the value of the new surface object. By default, there is no value for the surface object; this is implemented in widget space.</para>
				</section>
				<section role="unnumbered">
					<title>Templates</title>
					<para>Boxes are combined to form more useful widgets using templates. Templates are defined using XML files with the .t extension.</para>
					<para>The root node of a template is always &lt;vexi /&gt;. Any non-XML content in the vexi node is interpreted as VexiScript and forms the static portion of a template. The static content of a template is executed only once when the template is first used. Any reference to the static content of a template is referring to the same object.</para>
					<para>The vexi node can contain the following XML nodes:</para>
					<para>	&lt;ui:box /&gt;</para>
					<para>	Another template e.g. &lt;.path.to.valid.template /&gt;</para>
					<para>	Any custom node using the meta namespace e.g. &lt;meta:foo /&gt;</para>
					<para>Of the non-meta namespace nodes, only one can have content. The single tag nodes are pre- or post-applied to the template in the order in which they are defined.</para>
					<para>Example:</para>
					<para>&lt;vexi xmlns:namespace1=".name.space.one"&gt;<br/>	&lt;meta:doc&gt;I wrote this!&lt;/meta:doc&gt;<br/><br/>	// static content goes here<br/><br/>	&lt;.name.space.two.foo /&gt;<br/>	&lt;namespace1:bar /&gt;<br/>	&lt;ui:box&gt;<br/><br/>	// regular content goes here<br/><br/>	&lt;/ui:box&gt;<br/>&lt;/vexi&gt;</para>
				</section>
			</section>
			<section role="unnumbered">
				<title>The Box Model: Layout and Rendering</title>
				<section role="unnumbered">
					<title>Box Semantics</title>
					<para>A box can have 0 or more child boxes. Child boxes are assigned an index based on their order within the parent, which is numbered '0' (for the first child) to 'n-1' (for the last child).</para>
					<para>A parent box has the numerical properties 'cols' and 'rows'. If one is set to a value greater than '0', the other is set to '0'. If one is set to '0', the other is set to '1'. The value of one of either cols or rows for a box is always 0; they can never be simultaneously greater than 0. Whichever of the 'cols' or 'rows' properties has a value greater than zero will always read that value and is considered the constraint for packing child boxes into columns and rows, with the property whose value is '0' being dynamic with no limits.</para>
					<para>Child boxes are either packed or non-packed, defined by the boolean property packed.</para>
				</section>
				<section role="unnumbered">
					<title>Packed Boxes</title>
					<para>A packed box is a box whose packed property is true.</para>
					<para>Packed boxes are placed, in order, into columns and rows. If the constraining property on the parent box is 'cols' then packing is done by placing the next child box into the next available column space, otherwise it is done by row.</para>
					<para>A packed box's width is set to the aggregation of the widths of the columns it spans. If this width exceeds the box's maxwidth, if it's hshrink property is false, or the box's content width, if it's hshrink property is true, then the box is sized to it's maxwidth or content width respectively and then aligned horizontally according to it's align attribute within the space occupied by it's spanned columns. This is then repeated for rows and height.</para>
				</section>
				<section role="unnumbered">
					<title>Non-packed Boxes</title>
					<para>A non-packed box is a box whose packed property is false.</para>
					<para>Non-packed boxes are placed within the parent, irrespective of the parents columns and rows, according to their align property and are offset by their x and y properties.</para>
				</section>
				<section role="unnumbered">
					<title>Grid Layout</title>
					<para><emphasis><emphasis>Note: [ brackets ] are added for clarity only.</emphasis></para>
					<para>A box's content width is the maximum of [ the minimum of the aggregation of it's columns' minimum widths and the box's maxwidth property ] and the box's minwidth property.</para>
					<para>A column's minimum width is the maximum content width of all the boxes in that column.</para>
					<para>A column's maximum width is the maximum of [ the maximum maxwidth from each of the column's boxes whose hshrink property is false ] and [ the maximum content width from each of the column's boxes whose hshrink property is true ], but a column's maximum width is never smaller than it's minimum width.</para>
					<para>A box with colspan occupying several columns will never affect the minimum or maximum width of a column any more than is necessary to render the box according to it's minwidth and maxwidth properties. A box with colspan will only ever affect the last column it spans.</para>
					<para>A column's actual width is then determined by the space available in the parent, but will never be less than the column's minimum width. If the aggregation of the columns' maximum widths is less than the parent box's maxwidth then the remaining space, also called 'slack', is spread equally over the columns.</para>
					<para>This is all then repeated for rows and height.</para>
				</section>
				<section role="unnumbered">
					<title>Further Information on Vexi Grid Layout</title>
					<para>The Vexi Core grid layout engine is scalable with regards to columns, rows, and spanning children. What this means is that the grid layout for a parent box with 10,000 columns and a child spanning 10,000 columns will be calculated as fast as the single column equivalent.</para>
				</section>
				<section role="unnumbered">
					<title>Box Rendering</title>
					<para>Boxes are rendering "back to front" in Vexi, with parents being placed behind children and children rendered in order of index. Only the minimum area needed to update the screen to reflect the current box tree contained in a surface will be rendered at any given time.</para>
					<para>They way a box is rendered is controlled by it's rendering properties. These control how a box adapts to the space provided and the children inside of it.</para>
				</section>
			</section>
			<section role="unnumbered">
				<title>Box Properties</title>
				<para>A box is also accessible as a VexiScript object, and with key-value pairs that can be used to control the behaviour of a box.</para>
				<section role="unnumbered">
					<title>Layout</title>
					<para></para>
					<table frame="all">
						<tgroup cols='3' align='left' colsep='1' rowsep='1'>
						<colspec colname='c1'/>
						<colspec colname='c2'/>
						<colspec colname='c3'/>
						<tbody>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
							<row>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
								<entry>
									<para></para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<para></para>
			</section>
			<section role="unnumbered">
				<title>Rendering</title>
				<para>These properties effect how a box is visually presented on-screen.</para>
				<para></para>
				<table frame="all">
					<tgroup cols='3' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1'/>
					<colspec colname='c2'/>
					<colspec colname='c3'/>
					<tbody>
						<row>
							<entry>
								<para>Property</para>
							</entry>
							<entry>
								<para>Default Value</para>
							</entry>
							<entry>
								<para>Description</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>fill</para>
								<para>(string)</para>
							</entry>
							<entry>
								<para></para>
							</entry>
							<entry>
								<para></para>
							</entry>
						</row>
						<row>
							<entry>
								<para>font</para>
								<para>(stream)</para>
							</entry>
							<entry>
								<para></para>
							</entry>
							<entry>
								<para></para>
							</entry>
						</row>
						<row>
							<entry>
								<para>fontsize</para>
								<para>(int)</para>
							</entry>
							<entry>
								<para></para>
							</entry>
							<entry>
								<para></para>
							</entry>
						</row>
						<row>
							<entry>
								<para>text</para>
								<para>(string)</para>
							</entry>
							<entry>
								<para></para>
							</entry>
							<entry>
								<para></para>
							</entry>
						</row>
						<row>
							<entry>
								<para>textcolor</para>
								<para>(string)</para>
							</entry>
							<entry>
								<para></para>
							</entry>
							<entry>
								<para></para>
							</entry>
						</row>
						<row>
							<entry>
								<para>path</para>
								<para>(string)</para>
							</entry>
							<entry>
								<para></para>
							</entry>
							<entry>
								<para></para>
							</entry>
						</row>
						<row>
							<entry>
								<para>strokecolor</para>
								<para>(string)</para>
							</entry>
							<entry>
								<para></para>
							</entry>
							<entry>
								<para></para>
							</entry>
						</row>
						<row>
							<entry>
								<para>strokewidth</para>
								<para>(string)</para>
							</entry>
							<entry>
								<para></para>
							</entry>
							<entry>
								<para></para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<para></para>
		</section>
	</section>
	<section role="unnumbered">
		<title>VexiScript</title>
		<section role="unnumbered">
			<title>About VexiScript</title>
			<para>VexiScript is an adaptation of ECMAScript, Standard ECMA-262, which is most popularly implemented as Javascript. VexiScript implements a few additional features to ECMAScript. There are also some omissions and inconsistencies between VexiScript and ECMAScript.</para>
			<para>A familiarity with ECMAScript / Javascript syntax is assumed.</para>
		</section>
		<section role="unnumbered">
			<title>Declare Before Use</title>
			<para>In VexiScript any variables must be declared before they can be used.</para>
			<para>Private variables are initialized using the 'var' keyword:</para>
			<para>// a private variable<br/>var my_var = "only my scope can see me";</para>
			<para>Public variables, also known as box properties, are initialized using the 'thisbox' keyword:</para>
			<para>// a box property (public variable)<br/>thisbox.my_prop = "any box can see this";</para>
			<para>Box properties only need to be declared once per box, and the standard box properties are already declared by the Core.</para>
		</section>
		<section role="unnumbered">
			<title>Traps</title>
			<para>Traps are a feature unique to Vexi and it's predecessors. They can be likened to events, except the work on any property and events are just one application of traps. The basic concept is that whenever something that is trapped is accessed, a trap is fired. There are two types of access and hence two types of traps: read traps and write traps.</para>
			<para>Traps are assigned using the '++=' syntax. This is peculiar to VexiScript, and hence not part of ECMAScript. You can assign traps either anonymously or by reference:</para>
			<para>// assign an anonymous trap<br/>$box.some_prop ++= function(v) { /* do something */ }<br/><br/>// assign a referenced trap<br/>var some_trap = function(v) { /* do something */ }<br/>$box.some_prop ++= some_trap;</para>
			<para>Traps can be unassigned using the '--=' syntax. You can easily unassign referenced traps:</para>
			<para>// unassign a referenced trap<br/>$box.some_prop --= some_trap;</para>
			<para>You can only unassign anonymous traps from within themselves using the 'callee' keyword:</para>
			<para>// unassign an anonymous trap<br/>$box.some_prop ++= function(v) {<br/> $box.some_prop --= callee;<br/>}</para>
		</section>
		<section role="unnumbered">
			<title>Read Traps</title>
			<para>Read traps are executed whenever a property is read in VexiScript. Read traps are created when the function has <phrase role="strong">zero</phrase> arguments.</para>
			<para>// a read trap<br/>$box.foo ++= function() { return 2 * cascade; }<br/><br/>// will output 10<br/>vexi.log.info($box.foo);</para>
		</section>
		<section role="unnumbered">
			<title>Write Traps</title>
			<para>Write traps are executed whenever a property is written to, in VexiCode. Write traps are created when the assigned function has <phrase role="strong">one</phrase> argument.</para>
			<para>// a write trap<br/>$box.bar ++= function(v) { cascade = 3 * v; }<br/><br/>$box.bar = 5;<br/><br/>// will output 15<br/>vexi.log.info($box.foo);</para>
		</section>
		<section role="unnumbered">
			<title>Trap Cascades</title>
			<para>Multiple traps can be added on a single property. The execution of the trap functions in order is called cascading.</para>
			<para>The order of a trap cascade is the reverse of the order in which the traps are applied.</para>
			<para>// trap 1<br/>$box.prop ++= function(v) { vexi.log.info("FOO!"); }<br/><br/>// trap 2<br/>$box.prop ++= function(v) { vexi.log.info("BAR!"); }<br/><br/>// outputs BAR! then FOO!<br/>$box.prop = true;</para>
			<para>The cascade can be bypassed by appending an underscore to the property name.</para>
			<para>// trap 1<br/>$box._prop ++= function(v) { vexi.log.info("FOO!"); }<br/><br/>// trap 2<br/>$box.prop ++= function(v) { vexi.log.info("BAR!"); }<br/><br/>// outputs FOO! then BAR!<br/>$box.prop = true;</para>
		</section>
	</section>
	<section role="unnumbered">
		<title>Events</title>
		<para><beginpage/></para>
		<para></para>
	</section>
</section>
</chapter>
</book>
